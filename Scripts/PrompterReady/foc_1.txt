[MAIN CAM]
# Flow of control 1: If, then, else
So; we've started exploring some basic programming. right now we're kind of using Python like a simple calculator. There's nothing wrong with this, but, we could go further. Everything we've written so far does the same thing every time we run it - that is we write lines of code, and when we run the program those lines are executed one at a time, in the order they were written. 

but what if we want our program to be more flexible? This is where we start looking at flow of control, ie the ways in which we can manage which lines of code are executed, and when.

## If
Think back to data types and expressions, remember that we covered something called a "boolean" - a value that can be either True, or False, 1 or 0, yes or no. One of the primary uses of these booleans is flow control statements. Say we have a block of code and some boolean expression, and we want that block of code to run if, and ONLY if, that statement evaluates to True. Here's an example

[SIDE CAM OR CUT AWAY]
Ignoring that "123" is a terrible password that you should never ever use in real life - let's clarify: what we want to happen here, and what we can do to make it work.

We have some variable, which we have called 'password'. Here, we've given it a definite value, but let's say we don't know what that value is for now. We want the rest of our code to behave differently, depending on whether or not 'password' has the value "123", IE if the boolean expression `password == "123"` evaluates to true. 

If it does, then we want to print out "welcome", otherwise "incorrect password". But we can't do this because so far our code runs line by line, meaning BOTH print statements would run. But there is a solution, and it comes in the form of the if statement.

[CENTER CAM]
You can think of "if" as asking the computer "When executing this code, only run the following *if* this *condition* is true". The condition being some statement that will result in either True, or False. In Python, they're very simple to write:

There's really only three things to it: the `if` keyword which starts the expression, the condition (that is the boolean) and the actual code inside the if statement - which we call the body. Once a running program reaches an if statement, the body will be run only if the condition is `True`, otherwise it will be completely ignored and skipped over, moving onto the next thing.

One thing worth explaining is the syntax of the body here as we'll be seeing this same syntax very often from here on out.

[SIDE CAM]
Notice two things - the colon at the end of the first line, and space from the second line onwards between the left-side border. This is the way Python structures 'blocks' - that is groups of lines of code. The colon indicates that we're ready to enter into a new block of code. 

The spacing to the left that comes afterwards we call 'indentation' - this is done using the tab key on you keyboard, but should be added automatically by most IDEs . It is once this indentation stops that we will have left whichever block of code we were writing in, and have gone back to the one we were in before.

[CENTER CAM]
Remember that the body of the if statement is only the block that comes immediately afterwards - any code after we've come out of that block is NOT part of the if statement, and will be run no matter what.

[CENTER/CUT AWAY]
## Else
So, we can use if statements. And once we understand how code blocks work, we can use multiple if statements. Our example from earlier should now look something like this.

Our first if block will run if password is 123, the second will run if password is NOT 123. And this works perfectly for what we wanted. But we can make it better. It seems kind of silly to explicitly define another condition to just be the inverse of our first one - that is "if the password is NOT 123", "did they get the password wrong?", we should already know that based on whether or not the previous if statement worked. This is the perfect time to talk about the 'else' statement.

[SIDE CAM]
The else statement is, put simply, the inverse of an if statement. Notice how it doesn't have a condition, just the 'else' keyword, and a body - this is because it doesn't need one: an else statement wil run it's body if the previous if statement's condition was false. If you like, you can think of every else statement having an invisible condition which is added automatically...

... and is the opposite of the the previous if's condition.

[CENTER CAM]
And yes, this does mean that an else needs to immediately follow an if statement. We can't write else on its own, or one separate from an if, that wouldn't make sense. Not every if needs an else, but every else needs an if.

## elif, and chaining conditions
The thing about else/if pairs is that they're binary - that is when the code is run, you can only get one or the other - never both, and never neither. In the context of the example we've been looking at, you either get the password right, or you get it wrong.

But in many situations there may be more than two options - we may want to check against three or four more possible conditions. This is where `elif` statements come in.

[SIDE CAM]
Elif statements (which is short for else-if) go between if and else statements. See that, like ifs, they DO have a condition. They run if the previous statement did not, AND their condition is true. They must come after either an if statement, OR another elif statement. They don't need an else statement, but if there is one it has to come at the END.

[CUT AWAY or STAY ON SIDE CAM]
an if, flowed by at least one elifs, make a chain. For each of the blocks - that is the bodies of each statement - in that chain, only one can end up actually being run...

... because if at any point in the chain a condition is met, that then the corresponding body is run and the rest is just skipped. If the chain ends in an else...

... and no other conditions before it in the chain have been met (not the first if, not any of the later elifs), than that if statement is guaranteed to run.

## Summary
With the introduction of conditional statements, we've began to see our first real emerging complexity. We're starting to see that, even though at their core programs are just line by line instructions, this is by no means all we can do with them. We've also introduced blocks - a fundamental element of our code we'll see coming up again and again from now on. 

Next, we're going to be looking at some different flow-control statements, their similarities and differences, and when we might need to use them.