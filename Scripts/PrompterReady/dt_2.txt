# Basic data structures
When we finished off last time we hinted at how we can "build more complex data structures" from the basic types we covered last time.that's exactly what we'll be doing today. Let's get straight into it.

## Lists
In every day speech, a 'list' means a sequence of something, anything, all written down in the same place for convenience. This is pretty much exactly what list means in programming, too. 

[SIDE CAM]
In Python, a list is declared using square brackets, like this:

inside those brackets we write the elements, or items, we want, separated by commas:

[CENTER CAM]
Those items can be pretty much whatever we want them to be: strings, floats, integers, booleans - we can even mix and match different data types in the same list. We can define elements as literal values, using expressions, or even with variables.

Important to know is that lists are ordered, they're not just a jumbled set of elements! Each item comes after one item, and before another one (with the obvious exception of the start and end of the list). 

[SIDE CAM]
We access individual elements of a list like this. That is, the name of the list followed by square brackets containing the number of the element we want. 

We call this number the index. Note that in Python the index starts at 0; so what we might think of as the 1st element is stored at the 0th index, the 2nd at the 1st index, and so on.

We can also use this syntax to redefine elements in a list:

What we can't do is reference an item number that doesn't exist, or an "index out of bounds" as Python will call it in the error message you'll get if you try.

We can add items to the end of a list using `.append()`, or insert them at a specific point using `.insert()` which will shift everything afterwards up an index.

We can also remove elements of a certain value using `.remove()` or at a specific index using `.pop()`

[CENTER CAM]
These are examples of list methods. There are actually more than this, but these are four of the most important. You'll easily be able to find all of them by looking at online documentation *[SIDENOTE: "Documentation" - something that tells you how to use the language you're writing in, and what methods do what - like an instruction manual]*. 

Lists are our first example of a 'collection' data type, IE one used to store multiple items of data, and we're about to meet a few more.

## Dictionaries
Next up is dictionaries, another collection data type. Again think what the word dictionary means in common English: with a dictionary, you look up a word, and find that word's meaning:

In computer science, we call this "mapping", that is the idea that one value points - is mapped to - another. We call this fist value the 'key', and the other the 'value'. A bit like a chart, or map legend, or - well - a dictionary!

Python's in-built dictionaries implement this mapping, that is they allow you to store and retrieve key-value pairs.

[SIDE CAM]
In Python we can declare an empty dictionary like this:

Let's see how it works with a simple example, by mapping people by their names to their favorite colour. Dictionary items use a very similar syntax to lists, that is: the name of the dictionary followed by square brackets.

Only, instead of an index number (like for lists) it is in these square brackets we write our key. We then define it (that is, assign a value to the key) as whatever we want.

we access the value in the same way.

Let's add a few more:

This raises an important point. We ARE allowed duplicate values, that is two separate keys pointing to the same value - see how Dio and and Bob both have the same favorite colour, "red".

What we cannot do is have two values assigned to the same key, that is one key pointing to two things at once. If we try this in Python:

you'll see that we only end up replacing the original value.

[CENTER CAM]
Maybe now you have a question: "surely that's not like a dictionary at all, with a dictionary a word can have more than one meaning". Say "rock", which can either be a big lump of mineral, or a type of music. Unfortunately, in Python we can't do this; but we can fake it.

A key can only have one value, but that value can be a collection - with multiple items inside it. If Charlie has two favorite colours, we can assign their value as a list:

And yes, if you were curious, you can have a value in a dictionary be another dictionary. In fact you can pretty much nest any data collections you want: you can have lists of lists, dictionaries of lists, lists of lists of dictionaries of lists. etc. Just keep in mind that it can get messy, very quickly.

Dictionaries, like lists, and like all data types in fact, have several built in methods to make working with them easier. We won't be going over them all - and you'd be unlikely to use them all in a single program - but we recommend taking a look at them: they're easy to find documentation for online.

## A brief pause
Dictionaries and lists are by far the most commonly used data collection in python, and thus the two most important to understand - hence why we went over them in as much detail as we did. But there are still two more types built into Python, with their own special syntax. While not used as much, they ARE still important, and both have cases where they are the best (or even only) choice.

Thankfully, once we do understand lists and dictionaries, the remaining two can be explained pretty simply. We're going to go over them briefly.

## Sets
Sets are actually very simple: they're like lists, but they're completely unordered. Sets really ARE like a jumbled bag of items. They also can't have duplicate items, an item is included once, or not at all. 

[SIDE CAM]
In Python, sets are written with curly brackets.

You might be thinking "if they're un ordered, how to we access specific elements of a set?". And, well, you don't...

you can add items, remove items, get all or some of the items at random. But you can't pick, say, the first one because there IS no first one. They're all mixed together.

[CENTER CAM]
## Tuples
Tuples, also very similar to lists, are written with round brackets, and comma separated items, and accessed with the index number in square brackets.

The big difference with tuples, is that once they're defined, you cannot add or remove any elements to them; they're like lists that get locked shut as soon as you define them. You can't replace any items either, if you try: you get an error.

[SIDE CAM]
You can change the elements without completely overriding them, if that's possible (which depends on what kind of data type the elements are). For example you can do this:

[PAUSE]
but not this:
[PAUSE]

[CENTER CAM]
## Summary
Data structures like these allow our program to be a lot more flexible. They also introduce organization which is essential for many different algorithms, and is also just nice to have for us. It can be a lot easier to visualize one variable with a list of 10 things, all in a set order, than 10 different variables with different names and no way to order them. Although of course which is actually better always depends on the problem you're trying to solve.

Not only is learning these data structures important for learning programming, but observing how they build off the fundamental data types, and how in turn we could see more complex functionality emerging by using *them*, is exactly the kind of logic that will serve us well not just in learning *to* code, but in coding itself.